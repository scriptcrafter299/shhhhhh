--[[
    Latte MM2 Hub - Halloween Spooky Edition
    Enhanced MM2 Script with Spooky Features!
]]

local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local CurrentCamera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer
local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")

-- Halloween Color Theme
local HalloweenColors = {
    Orange = Color3.fromHex("#FF6B1A"),
    DarkOrange = Color3.fromHex("#FF4500"),
    Purple = Color3.fromHex("#9D4EDD"),
    DarkPurple = Color3.fromHex("#5A189A"),
    Blood = Color3.fromHex("#8B0000"),
    Ghost = Color3.fromHex("#E0E0E0"),
    Pumpkin = Color3.fromHex("#FF7518"),
    Witch = Color3.fromHex("#6B2E8A"),
    Midnight = Color3.fromHex("#0D0221"),
    Toxic = Color3.fromHex("#39FF14"),
}

-- Spooky Gradient Function
local function spookyGradient(text, color1, color2)
    local result = ""
    local length = #text
    for i = 1, length do
        local t = (i - 1) / math.max(length - 1, 1)
        local r = math.floor((color1.R + ((color2.R - color1.R) * t)) * 255)
        local g = math.floor((color1.G + ((color2.G - color1.G) * t)) * 255)
        local b = math.floor((color1.B + ((color2.B - color1.B) * t)) * 255)
        local char = text:sub(i, i)
        result = result .. '<font color="rgb(' .. r .. ", " .. g .. ", " .. b .. ')">' .. char .. "</font>"
    end
    return result
end

-- Welcome Popup
local Confirmed = false
WindUI:Popup({
    Title = spookyGradient("Latte MM2 Hub", HalloweenColors.Pumpkin, HalloweenColors.Purple),
    Icon = "skull",
    Content = (spookyGradient("Enhanced MM2 Script - Halloween Edition!", HalloweenColors.Orange, HalloweenColors.DarkPurple) .. "<br/>" .. spookyGradient("https://discord.gg/pU8r42d6hd", HalloweenColors.Toxic, HalloweenColors.Purple)),
    Buttons = {
        {
            Title = "Exit",
            Callback = function() end,
            Variant = "Tertiary"
        },
        {
            Title = "Copy Discord",
            Callback = function()
                setclipboard("https://discord.gg/pU8r42d6hd")
                WindUI:Notify({ 
                    Title = "Discord Copied!", 
                    Content = "Discord invite copied to clipboard!", 
                    Icon = "check-circle", 
                    Duration = 3 
                })
                Confirmed = true
            end,
            Variant = "Secondary"
        },
        {
            Title = spookyGradient("Continue", HalloweenColors.Toxic, HalloweenColors.Orange),
            Callback = function()
                Confirmed = true
            end,
            Variant = "Primary"
        }
    }
})

repeat task.wait() until Confirmed

-- */  Window  /* --
local Window = WindUI:CreateWindow({
    Title = spookyGradient("Latte MM2 Hub", HalloweenColors.Pumpkin, HalloweenColors.Purple),
    Author = "by Latte Scripts â€¢ Halloween Edition",
    Folder = "lattemm2hub",
    Icon = "skull",
    NewElements = true,
    
    Size = UDim2.new(0, 580, 0, 480),
    
    Transparent = true,
    BackgroundTransparency = 0.5,
    
    Theme = "Dark",
    SideBarWidth = 220,
    
    HideSearchBar = false,
    ScrollBarEnabled = true,
    
    OpenButton = {
        Title = "Open Latte Hub",
        CornerRadius = UDim.new(0.5, 0),
        StrokeThickness = 2,
        Enabled = true,
        Draggable = true,
        OnlyMobile = false,
        
        Color = ColorSequence.new(
            HalloweenColors.Pumpkin, 
            HalloweenColors.Purple
        )
    },
    
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function() end,
    },
})

-- Auto Farm Variables
local autoFarmCoins = false
local autoFarmCandy = false
local autoEndRound = false
local visitedPositions = {}
local flySpeed = 15
local collected = 0
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- ESP System Variables
local murderHasKnife = false
local sheriffHasGun = false
local currentESPOptions = { "Esp All" }
local highlightEnabled = true
local lineESPEnabled = false
local tracers = {}

-- Weapon Dupe Variables
local WeaponName = ""
local FunctionCall = 1

-- Visual Weapon Variables
local fromWeapon = ""
local toWeapon = ""

-- UI Path for dupe functions
local UIPath
if LocalPlayer.PlayerGui.MainGUI.Game:FindFirstChild("Inventory") ~= nil then
    UIPath = LocalPlayer.PlayerGui.MainGUI.Game.Inventory.Main
else
    UIPath = LocalPlayer.PlayerGui.MainGUI.Lobby.Screens.Inventory.Main
end

-- Character Settings
local CharacterSettings = {
    WalkSpeed = {
        Value = 16,
        Default = 16,
        Locked = false
    },
    JumpPower = {
        Value = 50,
        Default = 50,
        Locked = false
    }
}

-- ESP Functions
local function getRole(player)
    local character = player.Character
    if not character then return nil end
    local backpack = player:FindFirstChild("Backpack")
    if character:FindFirstChild("Knife") or (backpack and backpack:FindFirstChild("Knife")) then return "Murderer" end
    if character:FindFirstChild("Gun") or (backpack and backpack:FindFirstChild("Gun")) then return "Sheriff" end
    return "Innocent"
end

local function isPlayerTargeted(player, selectedOptions)
    local role = getRole(player)
    if not role then return false end
    if table.find(selectedOptions, "Esp All") then return true end
    if table.find(selectedOptions, "Esp Murder") and role == "Murderer" then return true end
    if table.find(selectedOptions, "Esp Sheriff") and role == "Sheriff" then return true end
    if table.find(selectedOptions, "Esp Sheriff / Murder") and (role == "Sheriff" or role == "Murderer") then return true end
    return false
end

local function createHighlight(character, color)
    local highlight = character:FindFirstChild("RoleHighlight")
    if not highlight then
        highlight = Instance.new("Highlight")
        highlight.Name = "RoleHighlight"
        highlight.FillTransparency = 0.5
        highlight.OutlineTransparency = 1
        highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        highlight.Adornee = character
        highlight.Parent = character
    end
    highlight.FillColor = color
end

local function removeHighlight(character)
    local highlight = character:FindFirstChild("RoleHighlight")
    if highlight then highlight:Destroy() end
end

local function createTracer(player, color)
    local line = Drawing.new("Line")
    line.Thickness = 2
    line.Color = color or Color3.new(1, 1, 1)
    line.Transparency = 1
    tracers[player] = line
end

local function removeTracer(player)
    if tracers[player] then
        tracers[player]:Remove()
        tracers[player] = nil
    end
end

local function updateESP()
    murderHasKnife = false
    sheriffHasGun = false

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local role = getRole(player)
            if role == "Murderer" then murderHasKnife = true end
            if role == "Sheriff" then sheriffHasGun = true end
        end
    end

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local role = getRole(player)
            local target = isPlayerTargeted(player, currentESPOptions)

            if highlightEnabled then
                if target then
                    local color = role == "Murderer" and HalloweenColors.Blood or 
                                 role == "Sheriff" and HalloweenColors.Toxic or 
                                 HalloweenColors.Orange
                    createHighlight(player.Character, color)
                else
                    removeHighlight(player.Character)
                end
            else
                removeHighlight(player.Character)
            end

            if lineESPEnabled and target then
                local color = role == "Murderer" and HalloweenColors.Blood or 
                             role == "Sheriff" and HalloweenColors.Toxic or 
                             HalloweenColors.Orange
                if not tracers[player] then 
                    createTracer(player, color) 
                else
                    tracers[player].Color = color
                end
            else
                removeTracer(player)
            end
        end
    end
end

-- Character Functions
local function updateCharacter()
    local character = LocalPlayer.Character
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        if not CharacterSettings.WalkSpeed.Locked then
            humanoid.WalkSpeed = CharacterSettings.WalkSpeed.Value
        end
        if not CharacterSettings.JumpPower.Locked then
            humanoid.JumpPower = CharacterSettings.JumpPower.Value
        end
    end
end

-- Auto Farm Functions
local function flyTo(pos, speed)
    if not rootPart then return end
    local distance = (pos - rootPart.Position).Magnitude
    local duration = distance / speed
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
    local goal = {CFrame = CFrame.new(pos)}
    local tween = TweenService:Create(rootPart, tweenInfo, goal)
    tween:Play()
    tween.Completed:Wait()
end

local function findCoinContainer()
    for _, v in workspace:GetChildren() do
        if v:FindFirstChild("CoinContainer") and v:IsA("Model") then
            return v:FindFirstChild("CoinContainer")
        end
    end
    return nil
end

-- AutoFarm Loop
task.spawn(function()
    while true do
        if autoFarmCoins or autoFarmCandy then
            character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            rootPart = character:FindFirstChild("HumanoidRootPart")
            
            if rootPart then
                local closest, shortest = nil, math.huge
                
                if autoFarmCandy then
                    local coinContainer = findCoinContainer()
                    
                    if coinContainer then
                        for _, coin in pairs(coinContainer:GetChildren()) do
                            if coin:GetAttribute("CoinID") == "Candy" and coin:FindFirstChild("TouchInterest") then
                                local dist = (coin.Position - rootPart.Position).Magnitude
                                
                                if dist < shortest and dist < 250 and not visitedPositions[coin] then
                                    closest = coin
                                    shortest = dist
                                end
                            end
                        end
                    else
                        for _, obj in ipairs(workspace:GetDescendants()) do
                            if obj:IsA("BasePart") and obj.Name == "candy" then
                                local dist = (obj.Position - rootPart.Position).Magnitude
                                
                                if dist < shortest and dist < 250 and not visitedPositions[obj] then
                                    closest = obj
                                    shortest = dist
                                end
                            end
                        end
                    end
                elseif autoFarmCoins then
                    for _, obj in ipairs(workspace:GetDescendants()) do
                        if obj:IsA("BasePart") and obj.Name == "Coin_Server" then
                            local dist = (obj.Position - rootPart.Position).Magnitude
                            if dist < shortest and dist < 250 and not visitedPositions[obj] then
                                closest = obj
                                shortest = dist
                            end
                        end
                    end
                end
                
                if closest and closest.Parent and closest:IsDescendantOf(workspace) then
                    flyTo(closest.Position, flySpeed)
                    if closest and closest.Parent and closest:IsDescendantOf(workspace) then
                        visitedPositions[closest] = true
                        collected += 1
                    end
                end
            end
        end
        
        task.wait(0.1)
    end
end)

-- Disable collisions while flying
RunService.Stepped:Connect(function()
    if autoFarmCoins or autoFarmCandy then
        for _, v in ipairs(character:GetDescendants()) do
            if v:IsA("BasePart") then
                v.CanCollide = false
            end
        end
    end
end)

-- Character respawn handling
LocalPlayer.CharacterAdded:Connect(function(char)
    character = char
    rootPart = char:WaitForChild("HumanoidRootPart")
    visitedPositions = {}
end)

-- Weapon Dupe Functions
local function VisualDupe()
    wait(math.random(1, 3))
    for i,v in pairs(UIPath.Weapons.Items.Container:GetChildren()) do
        for i,v in pairs(v.Container:GetChildren()) do
            if v.Name == "Christmas" or v.Name == "Halloween" then
                for i,v in pairs(v.Container:GetChildren()) do
                    if v:IsA("Frame") and v.ItemName.Label.Text == WeaponName then
                        local amount = v.Container.Amount.Text
                        if amount == "" or amount == "None" then
                            v.Container.Amount.Text = "x2"
                        else
                            local num = tonumber(amount:match("x(%d+)"))
                            if num then
                                v.Container.Amount.Text = "x" .. tostring(num + 1)
                            end
                        end
                    end
                end
            else
                if v:IsA("Frame") and v.ItemName.Label.Text == WeaponName then
                    local amount = v.Container.Amount.Text
                    if amount == "" or amount == "None" then
                        v.Container.Amount.Text = "x2"
                    else
                        local num = tonumber(amount:match("x(%d+)"))
                        if num then
                            v.Container.Amount.Text = "x" .. tostring(num + 1)
                        end
                    end
                end
            end
        end
    end
end

local function InventoryDupe()
    wait(math.random(3, 5))
    for i,v in pairs(UIPath.Weapons.Items.Container:GetChildren()) do
        for i,v in pairs(v.Container:GetChildren()) do
            if v.Name == "Christmas" or v.Name == "Halloween" then
                for i,v in pairs(v.Container:GetChildren()) do
                    if v:IsA("Frame") then
                        if v.ItemName.Label.Text ~= "Default Knife" and v.ItemName.Label.Text ~= "Default Gun" then
                            local amount = v.Container.Amount.Text
                            if amount == "" or amount == "None" then
                                v.Container.Amount.Text = "x2"
                            else
                                local num = tonumber(amount:match("x(%d+)"))
                                if num then
                                    v.Container.Amount.Text = "x" .. tostring(num * 2)
                                end
                            end
                        end
                    end
                end
            else
                if v:IsA("Frame") then
                    if v.ItemName.Label.Text ~= "Default Knife" and v.ItemName.Label.Text ~= "Default Gun" then
                        local amount = v.Container.Amount.Text
                        if amount == "" or amount == "None" then
                            v.Container.Amount.Text = "x2"
                        else
                            local num = tonumber(amount:match("x(%d+)"))
                            if num then
                                v.Container.Amount.Text = "x" .. tostring(num * 2)
                            end
                        end
                    end
                end
            end
        end
    end
    for i,v in pairs(UIPath.Pets.Items.Container.Current.Container:GetChildren()) do
        if v:IsA("Frame") then
            local amount = v.Container.Amount.Text
            if amount == "" or amount == "None" then
                v.Container.Amount.Text = "x2"
            else
                local num = tonumber(amount:match("x(%d+)"))
                if num then
                    v.Container.Amount.Text = "x" .. tostring(num * 2)
                end
            end
        end
    end
end

-- Visual Weapon Functions
local function NameMatch(name, search)
    local sanitizedName = name:gsub("_G_%d%d%d%d", ""):gsub("_K_%d%d%d%d", ""):lower()
    local sanitizedSearch = search:lower()
    return sanitizedName:find(sanitizedSearch, 1, true) ~= nil
end

-- Trade Scam Functions
local function StartVisualTrade()
    if game:GetService("Players").LocalPlayer.PlayerGui.TradeGUI.Enabled == true or game:GetService("Players").LocalPlayer.PlayerGui.TradeGUI_Phone.Enabled == true then
        wait(1)
        WindUI:Notify({ 
            Title = "Trade Scam Active", 
            Content = "Items In Trade Are Now Visual, Remove All Items!", 
            Icon = "alert-triangle", 
            Duration = 5 
        })
    else
        WindUI:Notify({ 
            Title = "Trade Scam Error", 
            Content = "You Need To Be In Trade For This To Work!", 
            Icon = "x-circle", 
            Duration = 5 
        })
    end
end

-- Weapon Spawner Functions
local function getrandombox()
    local success, boxes = pcall(function()
        return require(game:GetService("ReplicatedStorage").Database.Sync.MysteryBox)
    end)
    
    if not success or not boxes or next(boxes) == nil then 
        return "StandardBox"
    end
    
    local keys = {}
    for k, _ in pairs(boxes) do
        table.insert(keys, k)
    end
    return keys[math.random(1, #keys)]
end

local function opencrate(ITEM_NAME)
    local success = pcall(function()
        local boxmodule = require(game:GetService("ReplicatedStorage").Modules.BoxModule)
        local itemdatabase = require(game:GetService("ReplicatedStorage").Database.Sync.Item)
        
        if ITEM_NAME and itemdatabase[ITEM_NAME] then
            print("Spawning:", ITEM_NAME)
            boxmodule.OpenBox(getrandombox(), ITEM_NAME)
            
            local success2 = pcall(function()
                local poop = getsenv(game:GetService("Players").LocalPlayer.PlayerGui.MainGUI.Inventory.NewItem)._G
                poop.NewItem(ITEM_NAME, nil, nil, "Weapons", 1)
            end)
            
            WindUI:Notify({
                Title = "Success",
                Content = "Successfully spawned: " .. ITEM_NAME,
                Icon = "check-circle",
                Duration = 3
            })
        else
            WindUI:Notify({
                Title = "Error",
                Content = "Invalid item: " .. ITEM_NAME,
                Icon = "x-circle",
                Duration = 3
            })
        end
    end)
    
    if not success then
        WindUI:Notify({
            Title = "Error",
            Content = "Error opening crate for: " .. ITEM_NAME,
            Icon = "x-circle",
            Duration = 3
        })
    end
end

-- Gun System Functions
local GunSystem = {
    AutoGrabEnabled = false,
    NotifyGunDrop = true,
    GunDropCheckInterval = 1,
    ActiveGunDrops = {},
}

local mapPaths = {
    "ResearchFacility", "Hospital3", "MilBase", "House2", "Workplace",
    "Mansion2", "BioLab", "Hotel", "Factory", "Bank2", "PoliceStation"
}

local function ScanForGunDrops()
    GunSystem.ActiveGunDrops = {}
    for _, mapName in ipairs(mapPaths) do
        local map = workspace:FindFirstChild(mapName)
        if map then
            local gunDrop = map:FindFirstChild("GunDrop")
            if gunDrop then
                table.insert(GunSystem.ActiveGunDrops, gunDrop)
            end
        end
    end
    local rootGunDrop = workspace:FindFirstChild("GunDrop")
    if rootGunDrop then
        table.insert(GunSystem.ActiveGunDrops, rootGunDrop)
    end
end

local function GrabGun(gunDrop)
    if not gunDrop then
        ScanForGunDrops()
        if #GunSystem.ActiveGunDrops == 0 then
            WindUI:Notify({
                Title = "Gun System",
                Content = "No guns available on the map",
                Icon = "x-circle",
                Duration = 3
            })
            return false
        end
        local nearestGun = nil
        local minDistance = math.huge
        local character = LocalPlayer.Character
        local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            for _, drop in ipairs(GunSystem.ActiveGunDrops) do
                local distance = (humanoidRootPart.Position - drop.Position).Magnitude
                if distance < minDistance then
                    nearestGun = drop
                    minDistance = distance
                end
            end
        end
        gunDrop = nearestGun
    end
    if (gunDrop and LocalPlayer.Character) then
        local humanoidRootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            humanoidRootPart.CFrame = gunDrop.CFrame
            task.wait(0.3)
            local prompt = gunDrop:FindFirstChildOfClass("ProximityPrompt")
            if prompt then
                fireproximityprompt(prompt)
                WindUI:Notify({
                    Title = "Gun System",
                    Content = "Successfully grabbed the gun!",
                    Icon = "check-circle",
                    Duration = 3
                })
                return true
            end
        end
    end
    return false
end

local function AutoGrabGun()
    while GunSystem.AutoGrabEnabled do
        ScanForGunDrops()
        if #GunSystem.ActiveGunDrops > 0 and LocalPlayer.Character then
            local humanoidRootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                local nearestGun = nil
                local minDistance = math.huge
                for _, gunDrop in ipairs(GunSystem.ActiveGunDrops) do
                    local distance = (humanoidRootPart.Position - gunDrop.Position).Magnitude
                    if distance < minDistance then
                        nearestGun = gunDrop
                        minDistance = distance
                    end
                end
                if nearestGun then
                    humanoidRootPart.CFrame = nearestGun.CFrame
                    task.wait(0.3)
                    local prompt = nearestGun:FindFirstChildOfClass("ProximityPrompt")
                    if prompt then
                        fireproximityprompt(prompt)
                        task.wait(1)
                    end
                end
            end
        end
        task.wait(GunSystem.GunDropCheckInterval)
    end
end

-- Murder Functions
local killActive = false
local attackDelay = 0.5
local targetRoles = {"Sheriff", "Hero", "Innocent"}

local function getPlayerRole(player)
    local roles = ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer()
    if roles and roles[player.Name] then
        return roles[player.Name].Role
    end
    return nil
end

local function equipKnife()
    local character = LocalPlayer.Character
    if not character then return false end
    
    if character:FindFirstChild("Knife") then
        return true
    end
    
    local knife = LocalPlayer.Backpack:FindFirstChild("Knife")
    if knife then
        knife.Parent = character
        return true
    end
    return false
end

local function getNearestTarget()
    local targets = {}
    local roles = ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer()
    local localRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not localRoot then return nil end
    
    for _, player in ipairs(Players:GetPlayers()) do
        if (player ~= LocalPlayer) and player.Character then
            local role = getPlayerRole(player)
            local humanoid = player.Character:FindFirstChild("Humanoid")
            local targetRoot = player.Character:FindFirstChild("HumanoidRootPart")
            if (role and humanoid and humanoid.Health > 0 and targetRoot and table.find(targetRoles, role)) then
                table.insert(targets, {
                    Player = player,
                    Distance = (localRoot.Position - targetRoot.Position).Magnitude
                })
            end
        end
    end
    
    table.sort(targets, function(a, b)
        return a.Distance < b.Distance
    end)
    
    return (targets[1] and targets[1].Player) or nil
end

local function attackTarget(target)
    if not target or not target.Character then return false end
    
    local humanoid = target.Character:FindFirstChild("Humanoid")
    if not humanoid or humanoid.Health <= 0 then return false end
    
    if not equipKnife() then
        return false
    end
    
    local targetRoot = target.Character:FindFirstChild("HumanoidRootPart")
    local localRoot = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if (targetRoot and localRoot) then
        localRoot.CFrame = CFrame.new(targetRoot.Position + ((localRoot.Position - targetRoot.Position).Unit * 2), targetRoot.Position)
    end
    
    local knife = LocalPlayer.Character:FindFirstChild("Knife")
    if (knife and knife:FindFirstChild("Stab")) then
        for i = 1, 3 do
            knife.Stab:FireServer("Down")
        end
        return true
    end
    return false
end

local function killTargets()
    if killActive then return end
    killActive = true
    
    local function attackSequence()
        while killActive do
            local target = getNearestTarget()
            if not target then
                killActive = false
                break
            end
            
            attackTarget(target)
            task.wait(attackDelay)
        end
    end
    
    task.spawn(attackSequence)
end

local function stopKilling()
    killActive = false
end

-- Sheriff Functions
local shotType = "Default"

local function ShootMurderer()
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("Humanoid") or LocalPlayer.Character.Humanoid.Health <= 0 then
        return
    end
    
    local success, roles = pcall(function()
        return ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer()
    end)
    
    if not success or not roles then return end
    
    local murderer = nil
    for name, data in pairs(roles) do
        if data.Role == "Murderer" then
            murderer = Players:FindFirstChild(name)
            break
        end
    end
    
    if not murderer or not murderer.Character or not murderer.Character:FindFirstChild("Humanoid") or murderer.Character.Humanoid.Health <= 0 then
        return
    end
    
    local gun = LocalPlayer.Character:FindFirstChild("Gun") or LocalPlayer.Backpack:FindFirstChild("Gun")
    if (shotType == "Default") and not gun then return end
    
    if gun and not LocalPlayer.Character:FindFirstChild("Gun") then
        gun.Parent = LocalPlayer.Character
    end
    
    if (shotType == "Teleport") then
        local targetRoot = murderer.Character:FindFirstChild("HumanoidRootPart")
        local localRoot = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if (targetRoot and localRoot) then
            localRoot.CFrame = targetRoot.CFrame * CFrame.new(0, 0, -4)
        end
    end
    
    gun = LocalPlayer.Character:FindFirstChild("Gun")
    if (gun and gun:FindFirstChild("KnifeLocal")) then
        local targetPart = murderer.Character:FindFirstChild("HumanoidRootPart")
        if targetPart then
            local args = {
                [1] = 1,
                [2] = targetPart.Position,
                [3] = "AH2"
            }
            gun.KnifeLocal.CreateBeam.RemoteFunction:InvokeServer(unpack(args))
        end
    end
end

-- ========================================
-- TABS CREATION
-- ========================================

local MainSection = Window:Section({
    Title = spookyGradient("Main Features", HalloweenColors.Pumpkin, HalloweenColors.Purple),
    Icon = "flame",
    Opened = true,
})

local RoleSection = Window:Section({
    Title = spookyGradient("Role-Specific", HalloweenColors.Blood, HalloweenColors.DarkPurple),
    Icon = "users",
    Opened = true,
})

local ExploitSection = Window:Section({
    Title = spookyGradient("Exploits", HalloweenColors.DarkOrange, HalloweenColors.Witch),
    Icon = "zap",
    Opened = true,
})

local ConfigSection = Window:Section({
    Title = spookyGradient("Settings", HalloweenColors.Ghost, HalloweenColors.Purple),
    Icon = "settings",
    Opened = true,
})

-- */  ESP Tab  /* --
do
    local ESPTab = MainSection:Tab({
        Title = "ESP",
        Icon = "eye",
    })
    
    ESPTab:Section({
        Title = "Player ESP Settings",
        TextSize = 18,
        FontWeight = Enum.FontWeight.SemiBold,
    })
    
    ESPTab:Toggle({
        Flag = "HighlightESP",
    Title = "Highlight ESP",
        Desc = "Enable player highlighting (shows all by default)",
    Default = true,
        Callback = function(state)
            highlightEnabled = state
            if state then
                currentESPOptions = {"Esp All"}
            end
        updateESP()
    end
})

    ESPTab:Space()
    
    ESPTab:Dropdown({
        Flag = "ESPOptions",
        Title = "Filter ESP",
        Desc = "Filter which players to highlight",
        Values = {
            {Title = "Esp All", Icon = "users"},
            {Title = "Esp Sheriff", Icon = "shield"},
            {Title = "Esp Murder", Icon = "knife"},
            {Title = "Esp Sheriff / Murder", Icon = "target"}
        },
        Value = "Esp All",
        Callback = function(option)
            currentESPOptions = {option.Title}
            updateESP()
        end
    })
    
    ESPTab:Space()
    
    ESPTab:Toggle({
        Flag = "LineESP",
        Title = "Line ESP (Tracers)",
        Desc = "Draw lines to players",
    Default = false,
        Callback = function(state)
            lineESPEnabled = state
            if not state then
            for _, line in pairs(tracers) do line:Remove() end
            tracers = {}
        end
        updateESP()
    end
})
end

-- */  Auto Farm Tab  /* --
do
    local AutoFarmTab = MainSection:Tab({
        Title = "Auto Farm",
        Icon = "trending-up",
    })
    
    AutoFarmTab:Section({
        Title = "Coin & Candy Collection",
        TextSize = 18,
        FontWeight = Enum.FontWeight.SemiBold,
    })
    
    AutoFarmTab:Toggle({
        Flag = "CoinAutofarm",
        Title = "Coin Autofarm",
        Desc = "Automatically collect coins from the map",
        Default = false,
        Callback = function(state)
            autoFarmCoins = state
            if state then
                visitedPositions = {}
                collected = 0
                WindUI:Notify({ 
                    Title = "Coin Autofarm", 
                    Content = "Coin farming started!", 
                    Icon = "dollar-sign", 
                    Duration = 3 
                })
            else
                WindUI:Notify({ 
                    Title = "Coin Autofarm", 
                    Content = "Coin farming stopped", 
                    Icon = "x-circle", 
                    Duration = 3 
                })
            end
        end
    })
    
    AutoFarmTab:Space()
    
    AutoFarmTab:Toggle({
        Flag = "CandyAutofarm",
        Title = "Candy Autofarm",
        Desc = "Collect Halloween candy for event rewards",
        Default = false,
        Callback = function(state)
            autoFarmCandy = state
            if state then
                visitedPositions = {}
                collected = 0
                WindUI:Notify({ 
                    Title = "Candy Autofarm", 
                    Content = "Candy farming started!", 
                    Icon = "candy", 
                    Duration = 3 
                })
            else
                WindUI:Notify({ 
                    Title = "Candy Autofarm", 
                    Content = "Candy farming stopped", 
                    Icon = "x-circle", 
                    Duration = 3 
                })
            end
        end
    })
    
    AutoFarmTab:Space()
    
    AutoFarmTab:Slider({
        Flag = "FlySpeed",
        Title = "Fly Speed",
        Desc = "Adjust collection speed",
        Step = 1,
        Value = {
            Min = 5,
            Max = 50,
            Default = 15
        },
        Callback = function(value)
            flySpeed = value
        end
    })
    
    AutoFarmTab:Space()
    
    AutoFarmTab:Button({
        Title = "Reset Counter",
        Icon = "refresh-cw",
        Justify = "Center",
        Callback = function()
            collected = 0
            visitedPositions = {}
            WindUI:Notify({ 
                Title = "Counter Reset", 
                Content = "Collection counter reset!", 
                Icon = "check-circle", 
                Duration = 3 
            })
        end
    })
end

-- */  Character Tab  /* --
do
    local CharacterTab = MainSection:Tab({
        Title = "Character",
        Icon = "user",
    })
    
    CharacterTab:Section({
        Title = "Movement Settings",
        TextSize = 18,
        FontWeight = Enum.FontWeight.SemiBold,
    })
    
    CharacterTab:Slider({
        Flag = "WalkSpeed",
        Title = "Walk Speed",
        Desc = "Adjust your walking speed",
        Step = 1,
    Value = {
        Min = 0,
        Max = 200,
        Default = 16
    },
    Callback = function(value)
            CharacterSettings.WalkSpeed.Value = value
            updateCharacter()
        end
    })
    
    CharacterTab:Space()
    
    CharacterTab:Toggle({
        Flag = "BlockWalkSpeed",
        Title = "Lock Walk Speed",
        Desc = "Prevent walkspeed changes",
    Default = false,
    Callback = function(state)
            CharacterSettings.WalkSpeed.Locked = state
        end
    })
    
    CharacterTab:Space()
    
    CharacterTab:Slider({
        Flag = "JumpPower",
        Title = "Jump Power",
        Desc = "Adjust your jump height",
        Step = 1,
    Value = {
        Min = 0,
        Max = 200,
        Default = 50
    },
    Callback = function(value)
            CharacterSettings.JumpPower.Value = value
            updateCharacter()
        end
    })
    
    CharacterTab:Space()
    
    CharacterTab:Toggle({
        Flag = "BlockJumpPower",
        Title = "Lock Jump Power",
        Desc = "Prevent jump power changes",
    Default = false,
    Callback = function(state)
            CharacterSettings.JumpPower.Locked = state
        end
    })
    
    CharacterTab:Space()
    
    CharacterTab:Button({
        Title = "Reset to Default",
        Icon = "rotate-ccw",
        Color = HalloweenColors.Orange,
        Justify = "Center",
        Callback = function()
            CharacterSettings.WalkSpeed.Value = 16
            CharacterSettings.JumpPower.Value = 50
            updateCharacter()
            WindUI:Notify({
                Title = "Character Reset",
                Content = "Settings reset to default!",
                Icon = "check-circle",
                Duration = 3
            })
        end
    })
end

-- */  Teleport Tab  /* --
do
    local TeleportTab = MainSection:Tab({
        Title = "Teleport",
        Icon = "move",
    })
    
    TeleportTab:Section({
        Title = "Player Teleportation",
        TextSize = 18,
        FontWeight = Enum.FontWeight.SemiBold,
    })
    
    local teleportTarget = nil
    local teleportDropdown = nil

local function updateTeleportPlayers()
        local playersList = {}
    for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                table.insert(playersList, {
                    Title = player.Name,
                    Icon = "user"
                })
        end
    end
        return playersList
    end
    
    teleportDropdown = TeleportTab:Dropdown({
        Flag = "TeleportPlayer",
        Title = "Select Player",
        Desc = "Choose a player to teleport to",
        Values = updateTeleportPlayers(),
        Callback = function(option)
            teleportTarget = Players:FindFirstChild(option.Title)
        end
    })
    
    TeleportTab:Space()
    
    TeleportTab:Button({
        Title = "Teleport to Player",
        Icon = "zap",
        Color = HalloweenColors.Purple,
        Justify = "Center",
        Callback = function()
            if teleportTarget and teleportTarget.Character then
                local targetRoot = teleportTarget.Character:FindFirstChild("HumanoidRootPart")
                local localRoot = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if targetRoot and localRoot then
                    localRoot.CFrame = targetRoot.CFrame
            WindUI:Notify({
                        Title = "Teleport Success",
                        Content = "Teleported to " .. teleportTarget.Name,
                Icon = "check-circle",
                Duration = 3
                    })
        end
    else
        WindUI:Notify({
                    Title = "Teleport Error",
                    Content = "Target not found!",
            Icon = "x-circle",
            Duration = 3
                })
    end
end
    })
    
    TeleportTab:Space()
    
    TeleportTab:Button({
        Title = "Refresh Player List",
        Icon = "refresh-cw",
        Justify = "Center",
    Callback = function()
            teleportDropdown:Refresh(updateTeleportPlayers())
            WindUI:Notify({
                Title = "Players Updated",
                Content = "Player list refreshed!",
                Icon = "check-circle",
                Duration = 2
            })
        end
    })
end

-- */  Weapon Spawner Tab  /* --
do
    local WeaponSpawnerTab = MainSection:Tab({
        Title = "Weapon Spawner",
        Icon = "sword",
    })
    
    WeaponSpawnerTab:Section({
        Title = "Spawn Weapons",
        TextSize = 18,
        FontWeight = Enum.FontWeight.SemiBold,
    })
    
    local weaponName = ""
    
    WeaponSpawnerTab:Input({
        Flag = "WeaponName",
    Title = "Weapon Name",
        Desc = "Enter the name of the weapon",
        Placeholder = "e.g., CandyBlade, Raygun",
    Callback = function(text)
        weaponName = text
    end
})

    WeaponSpawnerTab:Space()
    
    WeaponSpawnerTab:Button({
    Title = "Spawn Weapon",
        Icon = "sparkles",
        Color = HalloweenColors.Orange,
        Justify = "Center",
    Callback = function()
        if weaponName ~= "" then
            opencrate(weaponName)
        else
            WindUI:Notify({
                Title = "Error",
                    Content = "Please enter a weapon name!",
                    Icon = "x-circle",
                    Duration = 3
            })
        end
    end
})

    WeaponSpawnerTab:Divider()
    
    WeaponSpawnerTab:Section({
        Title = "Quick Spawn Godlies",
        TextSize = 16,
        FontWeight = Enum.FontWeight.SemiBold,
    })
    
    WeaponSpawnerTab:Button({
        Title = "Spawn Raygun (Battlepass)",
        Icon = "zap",
        Color = HalloweenColors.Toxic,
        Callback = function()
            opencrate("Raygun")
        end
    })
    
    WeaponSpawnerTab:Space()
    
    WeaponSpawnerTab:Button({
        Title = "Spawn XenoKnife",
        Icon = "knife",
        Color = HalloweenColors.Blood,
        Callback = function()
            opencrate("XenoKnife")
        end
    })
    
    WeaponSpawnerTab:Space()
    
    WeaponSpawnerTab:Button({
        Title = "Spawn XenoGun",
        Icon = "crosshair",
        Color = HalloweenColors.DarkPurple,
        Callback = function()
            opencrate("XenoGun")
        end
    })
end

-- */  Weapon Dupe Tab  /* --
do
    local WeaponDupeTab = ExploitSection:Tab({
        Title = "Weapon Dupe",
        Icon = "copy",
    })
    
    WeaponDupeTab:Section({
        Title = "Single Weapon Duplication",
        TextSize = 18,
        FontWeight = Enum.FontWeight.SemiBold,
    })
    
    WeaponDupeTab:Input({
        Flag = "DupeWeaponName",
    Title = "Weapon Name",
        Desc = "Enter weapon to duplicate",
        Placeholder = "e.g., Lightbringer",
    Callback = function(text)
        WeaponName = text
    end
})

    WeaponDupeTab:Space()
    
    WeaponDupeTab:Input({
        Flag = "DupeAmount",
    Title = "Dupe Amount",
        Desc = "How many times to duplicate",
        Placeholder = "e.g., 5",
        Value = "1",
    Callback = function(text)
        FunctionCall = tonumber(text) or 1
    end
})

    WeaponDupeTab:Space()
    
    WeaponDupeTab:Button({
        Title = "Start Duplication",
        Icon = "layers",
        Color = HalloweenColors.DarkOrange,
        Justify = "Center",
    Callback = function()
        if WeaponName == "" then
            WindUI:Notify({ 
                Title = "Weapon Dupe Error", 
                    Content = "Please enter a weapon name!", 
                Icon = "x-circle", 
                Duration = 5 
            })
            return
        end
        
        WindUI:Notify({ 
            Title = "Weapon Dupe", 
                Content = "Duplicating " .. WeaponName .. " " .. FunctionCall .. " times...", 
                Icon = "loader", 
                Duration = 3 
        })
        
        for i = 1, FunctionCall do
            VisualDupe()
        end
        
        WindUI:Notify({ 
                Title = "Dupe Complete", 
                Content = "Successfully duplicated " .. WeaponName .. "!", 
            Icon = "check-circle", 
            Duration = 5 
        })
    end
})

    WeaponDupeTab:Divider()
    
    WeaponDupeTab:Section({
        Title = "Inventory Duplication",
        TextSize = 16,
        FontWeight = Enum.FontWeight.SemiBold,
    })
    
    WeaponDupeTab:Button({
        Title = "Dupe Entire Inventory",
        Icon = "package",
        Color = HalloweenColors.Witch,
        Justify = "Center",
    Callback = function()
        WindUI:Notify({ 
            Title = "Inventory Dupe", 
                Content = "Duplicating entire inventory...", 
                Icon = "loader", 
                Duration = 3 
        })
        
        InventoryDupe()
        
        WindUI:Notify({ 
            Title = "Inventory Dupe Complete", 
                Content = "Successfully duplicated inventory!", 
            Icon = "check-circle", 
            Duration = 5 
        })
    end
})
end

-- */  Visual Weapons Tab  /* --
do
    local VisualTab = ExploitSection:Tab({
        Title = "Visual Weapons",
        Icon = "eye-off",
    })
    
    VisualTab:Section({
        Title = "Change Weapon Appearance",
        TextSize = 18,
        FontWeight = Enum.FontWeight.SemiBold,
    })
    
    VisualTab:Input({
        Flag = "FromWeapon",
        Title = "Weapon to Replace",
        Desc = "Current weapon you have",
        Placeholder = "e.g., Blossom",
    Callback = function(text)
        fromWeapon = text
    end
})

    VisualTab:Space()
    
    VisualTab:Input({
        Flag = "ToWeapon",
        Title = "Weapon to Receive",
        Desc = "Weapon appearance you want",
        Placeholder = "e.g., Chroma",
    Callback = function(text)
        toWeapon = text
    end
})

    VisualTab:Space()
    
    VisualTab:Button({
        Title = "Change Visual",
        Icon = "wand-2",
        Color = HalloweenColors.Purple,
        Justify = "Center",
    Callback = function()
        if fromWeapon == "" or toWeapon == "" then
            WindUI:Notify({ 
                Title = "Visual Weapons Error", 
                Content = "Please enter both weapon names!", 
                Icon = "x-circle", 
                Duration = 5 
            })
            return
        end
        
        local success = pcall(function()
            local Weapons = require(game:GetService("ReplicatedStorage").Database.Sync.Item)
            local foundFromWeapons = {}
            local foundToWeapons = {}
            
            for WeaponName, _ in pairs(Weapons) do
                if NameMatch(WeaponName, fromWeapon) then
                    table.insert(foundFromWeapons, WeaponName)
                end
                if NameMatch(WeaponName, toWeapon) then
                    table.insert(foundToWeapons, WeaponName)
                end
            end
            
            if #foundFromWeapons > 0 and #foundToWeapons > 0 then
                for _, foundFromWeapon in ipairs(foundFromWeapons) do
                    for _, foundToWeapon in ipairs(foundToWeapons) do
                        Weapons[foundFromWeapon] = {}
                        for i, v in pairs(Weapons[foundToWeapon]) do
                            Weapons[foundFromWeapon][i] = v
                        end
                        game:GetService("ReplicatedStorage").Remotes.Inventory.Equip:FireServer(foundToWeapon)
                    end
                end
                WindUI:Notify({ 
                        Title = "Visual Success", 
                        Content = "Weapon visual changed!", 
                    Icon = "check-circle", 
                    Duration = 5 
                })
            else
                WindUI:Notify({ 
                        Title = "Visual Error", 
                        Content = "Weapon not found!", 
                    Icon = "x-circle", 
                    Duration = 5 
                })
            end
        end)
        
        if not success then
            WindUI:Notify({ 
                    Title = "Visual Error", 
                    Content = "Failed to change visual!", 
                Icon = "x-circle", 
                Duration = 5 
            })
        end
    end
})
end

-- */  Trade Scam Tab  /* --
do
    local TradeScamTab = ExploitSection:Tab({
        Title = "Trade Scam",
        Icon = "shield-alert",
    })
    
    TradeScamTab:Section({
        Title = "Visual Trade Protection",
        TextSize = 18,
        FontWeight = Enum.FontWeight.SemiBold,
    })

local visualTradeEnabled = false

    TradeScamTab:Toggle({
        Flag = "VisualTrade",
        Title = "Enable Visual Trade",
        Desc = "Make items in trade appear visual only",
    Default = false,
        Callback = function(state)
            visualTradeEnabled = state
        WindUI:Notify({ 
            Title = "Visual Trade", 
                Content = state and "Visual Trade Enabled!" or "Visual Trade Disabled!", 
                Icon = state and "shield-check" or "shield-off",
            Duration = 3 
        })
    end
})

    TradeScamTab:Space()
    
    TradeScamTab:Button({
        Title = "Activate Visual Trade",
        Icon = "alert-triangle",
        Color = HalloweenColors.Blood,
        Justify = "Center",
    Callback = function()
        if not visualTradeEnabled then
            WindUI:Notify({ 
                    Title = "Error", 
                    Content = "Enable Visual Trade first!", 
                Icon = "x-circle", 
                Duration = 5 
            })
            return
        end
        StartVisualTrade()
    end
})
end

-- */  Server Utilities Tab  /* --
do
    local UtilitiesTab = ExploitSection:Tab({
        Title = "Utilities",
        Icon = "wrench",
    })
    
    UtilitiesTab:Section({
        Title = "Server Utilities",
        TextSize = 18,
        FontWeight = Enum.FontWeight.SemiBold,
    })
    
    UtilitiesTab:Button({
        Title = "Enable Anti-AFK",
        Icon = "moon",
        Color = HalloweenColors.Midnight,
        Justify = "Center",
        Callback = function()
            local success = pcall(function()
                loadstring(game:HttpGet("https://raw.githubusercontent.com/hassanxzayn-lua/Anti-afk/main/antiafkbyhassanxzyn"))()
            end)
            
            if success then
            WindUI:Notify({ 
                    Title = "Anti-AFK", 
                    Content = "Anti-AFK enabled!", 
                    Icon = "check-circle", 
                Duration = 3 
            })
            else
            WindUI:Notify({ 
                    Title = "Anti-AFK Error", 
                    Content = "Failed to load Anti-AFK!", 
                    Icon = "x-circle", 
                Duration = 5 
            })
        end
    end
})

    UtilitiesTab:Space()
    
    UtilitiesTab:Button({
        Title = "Server Lagger",
        Icon = "zap",
        Color = HalloweenColors.Blood,
        Justify = "Center",
    Callback = function()
        WindUI:Notify({ 
            Title = "Server Lagger", 
                Content = "Lagging server... Risk of disconnect!", 
            Icon = "alert-triangle", 
            Duration = 5 
        })
        
            pcall(function()
            local e = game:GetService("ReplicatedStorage").GetSyncData
            local InvokeServer = e.InvokeServer
            local spawn = task.spawn
                local a = 0
            while 1 do
                for i=1, 1 do
                    spawn(InvokeServer, e)
                end
                a = a + 1
                if a == 3 then
                    a = 0
                    wait(0)
                end
            end
        end)
    end
})
end

-- ========================================
-- ROLE-SPECIFIC TABS
-- ========================================

-- */  Innocent Tab  /* --
do
    local InnocentTab = RoleSection:Tab({
        Title = "Innocent",
        Icon = "user-check",
    })
    
    InnocentTab:Section({
                Title = "Gun System",
        TextSize = 18,
        FontWeight = Enum.FontWeight.SemiBold,
    })
    
    InnocentTab:Toggle({
        Flag = "AutoGrabGun",
    Title = "Auto Grab Gun",
        Desc = "Automatically collect dropped gun",
    Default = false,
    Callback = function(state)
            GunSystem.AutoGrabEnabled = state
        if state then
                coroutine.wrap(AutoGrabGun)()
            WindUI:Notify({
                    Title = "Auto Grab Gun",
                    Content = "Auto grab enabled!",
                Icon = "check-circle",
                Duration = 3
                })
        else
            WindUI:Notify({
                    Title = "Auto Grab Gun",
                    Content = "Auto grab disabled",
                    Icon = "x-circle",
                Duration = 3
                })
        end
    end
    })
    
    InnocentTab:Space()
    
    InnocentTab:Button({
        Title = "Grab Gun Manually",
        Icon = "hand",
        Color = HalloweenColors.Toxic,
        Justify = "Center",
    Callback = function()
            GrabGun()
        end
    })
    
    InnocentTab:Space()
    
    InnocentTab:Toggle({
        Flag = "NotifyGunDrop",
        Title = "Notify Gun Drop",
        Desc = "Get notified when gun drops",
        Default = true,
        Callback = function(state)
            GunSystem.NotifyGunDrop = state
        end
    })
end

-- */  Murderer Tab  /* --
do
    local MurdererTab = RoleSection:Tab({
        Title = "Murderer",
        Icon = "knife",
    })
    
    MurdererTab:Section({
        Title = "Kill Functions",
        TextSize = 18,
        FontWeight = Enum.FontWeight.SemiBold,
    })
    
    MurdererTab:Toggle({
        Flag = "KillAll",
        Title = "Kill All Players",
        Desc = "Automatically attack nearby targets",
        Default = false,
        Callback = function(state)
            if state then
                killTargets()
        WindUI:Notify({
                    Title = "Kill All",
                    Content = "Attack sequence started!",
                    Icon = "skull",
            Duration = 2
                })
            else
                stopKilling()
    WindUI:Notify({
                    Title = "Kill All",
                    Content = "Attack stopped",
        Icon = "x-circle",
        Duration = 2
                })
            end
        end
    })
    
    MurdererTab:Space()
    
    MurdererTab:Slider({
        Flag = "AttackDelay",
    Title = "Attack Delay",
        Desc = "Time between attacks",
    Step = 0.1,
    Value = {
        Min = 0.1,
        Max = 2,
        Default = 0.5
    },
    Callback = function(value)
            attackDelay = value
        end
    })
    
    MurdererTab:Space()
    
    MurdererTab:Button({
    Title = "Equip Knife",
        Icon = "knife",
        Color = HalloweenColors.Blood,
        Justify = "Center",
    Callback = function()
        if equipKnife() then
            WindUI:Notify({
                    Title = "Knife Equipped",
                    Content = "Knife is ready!",
                Icon = "check-circle",
                Duration = 2
                })
        else
            WindUI:Notify({
                    Title = "Error",
                Content = "No knife found!",
                Icon = "x-circle",
                Duration = 2
                })
        end
    end
    })
end

-- */  Sheriff Tab  /* --
do
    local SheriffTab = RoleSection:Tab({
        Title = "Sheriff",
        Icon = "shield",
    })
    
    SheriffTab:Section({
        Title = "Shooting Functions",
        TextSize = 18,
        FontWeight = Enum.FontWeight.SemiBold,
    })
    
    SheriffTab:Dropdown({
        Flag = "ShotType",
    Title = "Shot Type",
        Desc = "Choose shooting method",
        Values = {
            {Title = "Default", Icon = "target"},
            {Title = "Teleport", Icon = "zap"}
        },
    Value = "Default",
        Callback = function(option)
            shotType = option.Title
        WindUI:Notify({
                Title = "Shot Type",
                Content = "Set to: " .. option.Title,
            Icon = "check-circle",
                Duration = 2
            })
        end
    })
    
    SheriffTab:Space()
    
    SheriffTab:Button({
        Title = "Shoot Murderer",
        Icon = "crosshair",
        Color = HalloweenColors.Toxic,
        Justify = "Center",
        Callback = function()
            ShootMurderer()
        end
    })
end

-- */  Settings & Config Tab  /* --
do
    local SettingsTab = ConfigSection:Tab({
        Title = "Settings",
        Icon = "settings",
    })
    
    SettingsTab:Section({
        Title = "GUI Settings",
        TextSize = 18,
        FontWeight = Enum.FontWeight.SemiBold,
    })
    
    SettingsTab:Keybind({
        Flag = "GUIKeybind",
        Title = "GUI Toggle Key",
        Desc = "Press to open/close GUI",
        Value = "G",
        Callback = function(key)
            Window:SetToggleKey(Enum.KeyCode[key])
            WindUI:Notify({
                Title = "Keybind Set",
                Content = "GUI toggle key: " .. key,
                Icon = "keyboard",
                Duration = 3
            })
        end
    })
    
    SettingsTab:Divider()
    
    SettingsTab:Section({
        Title = "Config Management",
        TextSize = 16,
        FontWeight = Enum.FontWeight.SemiBold,
    })
    
    local ConfigName = "default"
    local ConfigManager = Window.ConfigManager
    
    local ConfigNameInput = SettingsTab:Input({
        Flag = "ConfigName",
        Title = "Config Name",
        Desc = "Name for your configuration",
        Icon = "file",
        Value = ConfigName,
        Callback = function(value)
            ConfigName = value
        end
    })
    
    SettingsTab:Space()
    
    local AllConfigs = ConfigManager:AllConfigs()
    local DefaultValue = table.find(AllConfigs, ConfigName) and ConfigName or nil
    
    SettingsTab:Dropdown({
        Flag = "ConfigSelect",
        Title = "Load Config",
        Desc = "Select existing configuration",
        Values = AllConfigs,
        Value = DefaultValue,
        Callback = function(value)
            ConfigName = value
            ConfigNameInput:Set(value)
        end
    })
    
    SettingsTab:Space()
    
    SettingsTab:Button({
        Title = "Save Config",
        Icon = "save",
        Color = HalloweenColors.Toxic,
        Justify = "Center",
        Callback = function()
            Window.CurrentConfig = ConfigManager:CreateConfig(ConfigName)
            if Window.CurrentConfig:Save() then
    WindUI:Notify({
                    Title = "Config Saved",
                    Content = "Saved as '" .. ConfigName .. "'",
                    Icon = "check",
        Duration = 3
                })
            end
        end
    })
    
    SettingsTab:Space()
    
    SettingsTab:Button({
        Title = "Load Config",
        Icon = "upload",
        Color = HalloweenColors.Purple,
        Justify = "Center",
        Callback = function()
            Window.CurrentConfig = ConfigManager:CreateConfig(ConfigName)
            if Window.CurrentConfig:Load() then
    WindUI:Notify({
                    Title = "Config Loaded",
                    Content = "Loaded '" .. ConfigName .. "'",
                    Icon = "refresh-cw",
        Duration = 3
                })
            end
        end
    })
end

-- */  Info & Socials Tab  /* --
do
    local InfoTab = ConfigSection:Tab({
        Title = "Info & Socials",
        Icon = "info",
    })
    
    InfoTab:Section({
        Title = "Latte MM2 Hub",
        TextSize = 20,
        FontWeight = Enum.FontWeight.Bold,
    })
    
    InfoTab:Space()
    
    InfoTab:Section({
        Title = "Enhanced MM2 script with comprehensive features including ESP, auto-farming, weapon duplication, role-specific functions, and much more! Perfect for Murder Mystery 2 players looking for an edge.",
        TextSize = 16,
        TextTransparency = 0.3,
        FontWeight = Enum.FontWeight.Medium,
    })
    
    InfoTab:Divider()
    
    InfoTab:Section({
        Title = "Features",
        TextSize = 16,
        FontWeight = Enum.FontWeight.SemiBold,
    })
    
    InfoTab:Section({
        Title = "Player ESP â€¢ Auto Farm â€¢ Character Mods â€¢ Teleportation â€¢ Weapon Spawner â€¢ Weapon Duplication â€¢ Visual Weapons â€¢ Trade Scam â€¢ Role Functions â€¢ Anti-AFK â€¢ Server Utilities",
        TextSize = 15,
        TextTransparency = 0.4,
        FontWeight = Enum.FontWeight.Medium,
    })
    
    InfoTab:Divider()
    
    InfoTab:Section({
        Title = "Community & Support",
        TextSize = 16,
        FontWeight = Enum.FontWeight.SemiBold,
    })
    
    InfoTab:Button({
    Title = "Copy Discord Invite",
        Icon = "message-circle",
        Color = HalloweenColors.DarkPurple,
        Justify = "Center",
    Callback = function()
        setclipboard("https://discord.gg/pU8r42d6hd")
        WindUI:Notify({ 
                Title = "Discord", 
                Content = "Invite copied to clipboard!", 
            Icon = "check-circle", 
            Duration = 3 
        })
    end
})

    InfoTab:Space()
    
    InfoTab:Button({
        Title = "YouTube Channel",
        Icon = "youtube",
        Color = HalloweenColors.Blood,
        Justify = "Center",
            Callback = function()
            setclipboard("https://www.youtube.com/@LatteHub")
                    WindUI:Notify({
                Title = "YouTube",
                Content = "Channel link copied!",
                Icon = "check-circle",
                Duration = 3
            })
        end
    })
    
    InfoTab:Space()
    
    InfoTab:Button({
        Title = "TikTok Profile",
        Icon = "music",
        Color = HalloweenColors.Pumpkin,
        Justify = "Center",
            Callback = function()
            setclipboard("http://tiktok.com/@scriptsbylatte/")
                    WindUI:Notify({
                Title = "TikTok",
                Content = "Profile link copied!",
                Icon = "check-circle",
                Duration = 3
            })
        end
    })
end

-- ========================================
-- INITIALIZATION
-- ========================================

-- Initialize ESP
updateESP()

-- Connect ESP updates
RunService.RenderStepped:Connect(function()
    if not lineESPEnabled then return end
    for player, line in pairs(tracers) do
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = player.Character.HumanoidRootPart
            local screenPos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(hrp.Position)
            local rootGuiSize = workspace.CurrentCamera.ViewportSize
            if onScreen then
                line.From = Vector2.new(rootGuiSize.X / 2, rootGuiSize.Y)
                line.To = Vector2.new(screenPos.X, screenPos.Y)
                line.Visible = true
            else
                line.Visible = false
            end
        else
            line.Visible = false
        end
    end
end)

-- Monitor player changes for ESP
local function monitorPlayer(player)
    player.CharacterAdded:Connect(function()
        local backpack = player:WaitForChild("Backpack")
        backpack.ChildAdded:Connect(updateESP)
        backpack.ChildRemoved:Connect(updateESP)
        updateESP()
    end)

    if player.Character then
        local backpack = player:FindFirstChild("Backpack")
        if backpack then
            backpack.ChildAdded:Connect(updateESP)
            backpack.ChildRemoved:Connect(updateESP)
        end
    end
end

for _, player in ipairs(Players:GetPlayers()) do monitorPlayer(player) end
Players.PlayerAdded:Connect(monitorPlayer)

-- Player removal handling
Players.PlayerRemoving:Connect(function(player)
    if player == LocalPlayer then
        for _, line in pairs(tracers) do
            if line then line:Remove() end
        end
        tracers = {}
    end
end)

-- Initialize gun system
task.spawn(function()
    if not LocalPlayer.Character then
        LocalPlayer.CharacterAdded:Wait()
    end
    ScanForGunDrops()
    if GunSystem.AutoGrabEnabled then
        coroutine.wrap(AutoGrabGun)()
    end
end)

-- Set default keybind
Window:SetToggleKey(Enum.KeyCode.G)

-- Config setup
Window.CurrentConfig = Window.ConfigManager:CreateConfig("default")
Window.CurrentConfig:Save()

-- Welcome notification
WindUI:Notify({
    Title = spookyGradient("Latte MM2 Hub Loaded!", HalloweenColors.Pumpkin, HalloweenColors.Purple),
    Content = "Welcome to the Halloween Edition! Press G to toggle GUI.",
    Icon = "skull",
    Duration = 5
})
